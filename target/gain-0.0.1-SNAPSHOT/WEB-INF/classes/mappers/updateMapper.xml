<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
"http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="mapper.tsetMapper">

	<update id="memver_update" parameterType="java.lang.String" >
			 MERGE INTO 
			            member  
			      USING 
			            Dual      
			      ON (  
			      <if test="mem_no == null">
			            MEM_NO = null
			      </if>
			      <if test="mem_no != null">
			            MEM_NO = #{mem_no}
			      </if>
			            )
				  WHEN 
				      	MATCHED THEN 
					                UPDATE SET
					                            mem_name = #{mem_name},
											    mem_grade = #{mem_grade},
											    mem_depart = #{mem_depart},
											    mem_comp  = #{mem_comp},
											    mem_indate = TO_DATE(#{mem_indate},'YYYY-MM-DD')
				      	WHEN NOT MATCHED THEN
						            INSERT(
						                        MEM_NO,
							                    MEM_NAME,
							                    MEM_GRADE,
							                    MEM_DEPART,
							                    MEM_COMP,
							                    MEM_INDATE                                        
							                  )
								    VALUES(
										        'MEM'||SEQ_MEM_NO.nextval,
										        #{mem_name},
										        #{mem_grade},
										        #{mem_depart},
										        #{mem_comp},
										        #{mem_indate}       
								        	)
	
      
	</update>
	
	<update id="privacy_update" parameterType="MemberVo" >
			 MERGE INTO 
			            privacy 
			      USING 
			            Dual      
			      ON (  
			      <if test="mem_no == null">
			            MEM_NO = null
			      </if>
			      <if test="mem_no != null">
			            MEM_NO = #{mem_no}
			      </if>
			            )
				  WHEN 
				      	MATCHED THEN 
					                UPDATE SET
					                            pri_serial   = #{pri_serial  },
												pri_marriage = #{pri_marriage},
												pri_tel      = #{pri_tel     },
												pri_phone    = #{pri_phone   },
												pri_email    = #{pri_email   },
												pri_addr     = #{pri_addr    },
												pri_gender   = #{pri_gender  }
				      	WHEN NOT MATCHED THEN
						            INSERT(
						                        MEM_NO,
							                    PRI_SERIAL,
							                    PRI_MARRIAGE,
							                    PRI_TEL,
							                    PRI_PHONE,
							                    PRI_EMAIL,
							                    PRI_ADDR,
							                    PRI_GENDER
							                    )
								    VALUES(
									            (select * from (
									            				 SELECT 
									                                     MEM_NO
									                                FROM 
									                                    member 
									                                WHERE 
									                                    MEM_name = #{mem_name}
									                                ORDER by MEM_NO DESC
									                     		)
									                where rownum = 1
									               ),
									            #{pri_serial},
									            #{pri_marriage},
									            #{pri_tel},
									            #{pri_phone},
									            #{pri_email},
									            #{pri_addr},
									            #{pri_gender}
								            )	
         
	</update>
           	
	<update id="military_update" parameterType="java.lang.String" >
			 MERGE INTO 
			            military
			      USING 
			            Dual      
			      ON (  
			      <if test="mem_no == null">
			            MEM_NO = null
			      </if>
			      <if test="mem_no != null">
			            MEM_NO = #{mem_no}
			      </if>
			            )
				  WHEN 
				      	MATCHED THEN 
					                UPDATE SET
					                            mil_yn        = #{mil_yn},
										        mil_startday  = TO_DATE(#{mil_startday},'YYYY-MM-DD'),
										        mil_endday    = TO_DATE(#{mil_endday  },'YYYY-MM-DD'),
										        mil_category  = #{mil_category}
				      	WHEN NOT MATCHED THEN
						            INSERT(
										       MIL_NO,
							                   MEM_NO,
							                   MIL_YN,
							                   MIL_STARTDAY,
							                   MIL_ENDDAY,
							                   MIL_CATEGORY
								               )
								    VALUES(
								            'MIL'||SEQ_MIL_NO.nextval,
								            (select * from (
								                            SELECT  MEM_NO
								                                FROM  member  
								                                WHERE  MEM_name = #{mem_name}
								                                        ORDER by MEM_NO DESC
								                     		)
								                where rownum = 1
								               ),
								            #{mil_yn},
								            #{mil_startday},
								            #{mil_endday},
								            #{mil_category}
								            )
								        	
								        	
								        	
	
	</update>

<!-- <update id="memver_update2" parameterType="MemberVo">
	 MERGE INTO member m
      USING (     
       SELECT 
            m.MEM_NAME as MEM_NAME,
            m.mem_grade as mem_grade,
            m.mem_depart as mem_depart,
            m.mem_comp as mem_comp,
            m.mem_indate as mem_indate,
                        
            p.pri_serial as pri_serial,
            p.pri_marriage as pri_marriage,
            p.pri_tel as pri_tel,
            p.pri_phone as pri_phone,
            p.pri_email as pri_email,
            p.pri_addr as pri_addr,
            p.pri_gender as pri_gender,
            
            mil.mil_yn as mil_yn,
            mil.mil_startday as mil_startday,
            mil.mil_endday as mil_endday,
            mil.mil_category as mil_category
                      
       FROM 
       		member m,
            privacy p,
            military mil
                    
       WHERE 
            m.MEM_NO = #{mem_no} 
            and m.MEM_NO = p.MEM_NO
            and m.MEM_NO = mil.MEM_NO            
        )
      
      ON (m.MEM_NO = #{mem_no})
	  WHEN MATCHED THEN 
		UPDATE SET
					 mem_name = #{mem_name},
		             mem_grade  = #{mem_grade },
		             mem_depart = #{mem_depart},
		             mem_comp  = #{mem_comp},
		             mem_indate = #{mem_indate},
		             
		             pri_serial   = #{pri_serial  },
		             pri_marriage = #{pri_marriage},
		             pri_tel      = #{pri_tel     },
		             pri_phone    = #{pri_phone   },
		             pri_email    = #{pri_email   },
		             pri_addr     = #{pri_addr    },
					 pri_gender   = #{pri_gender  },
					 
					 mil_yn        = #{mil_yn      },
					 mil_startday  = #{mil_startday},
					 mil_endday    = #{mil_endday  },
	                 mil_category  = #{mil_category}
	</update>	 -->
	
	<update id="schoolupdate" parameterType="MemberVo">
			 MERGE INTO 
			            school 
			      USING 
			            Dual      
			      ON (  
			       <if test="sch_no == null">
			            sch_no = null
			      </if>
			      <if test="sch_no != null">
			             sch_no = #{sch_no}
			      </if>
			           
			            )
				  WHEN 
				      	MATCHED THEN 
					                UPDATE SET
					                            sch_grade    = #{sch_grade   }, 
										        sch_name     = #{sch_name    }, 
										        sch_major    = #{sch_major   }, 
										        sch_startday = #{sch_startday}, 
										        sch_endday   = #{sch_endday  }, 
										        sch_status   = #{sch_status  }
				      	WHEN NOT MATCHED THEN
						            INSERT (
						                         SCH_NO,
										         MEM_NO,     
										         SCH_GRADE,  
										         SCH_NAME,   
										         SCH_MAJOR,  
										         SCH_STARTDAY,
										         SCH_ENDDAY, 
										         SCH_STATUS 
						                        ) 
						            VALUES (
									            'SCH'||SEQ_SCH_NO.nextval,
									                <if test="mem_no == null">
									                (select * from (
									                                SELECT  MEM_NO
									                                    FROM  member  
									                                 
									                                            ORDER by MEM_NO DESC
									                                ) 
									                    where rownum = 1
									                   ),
									                 </if>
									                 <if test="mem_no != null">
									                 #{mem_no},
									                 </if>
									            #{sch_grade},
									            #{sch_name},
									            #{sch_major},
									            #{sch_startday},
									            #{sch_endday},
									            #{sch_status}
						                        )
	</update>
	
	
	<update id="educationupdate" parameterType="MemberVo">
			 MERGE INTO 
			            education 
			      USING 
			            Dual      
			      ON (  
			            edu_no 	=#{edu_no   }
			            )
				  WHEN 
				      	MATCHED THEN 
					                UPDATE SET
					                            edu_name     = #{edu_name    },
										        edu_startday = #{edu_startday},
										        edu_endday   = #{edu_endday  },
										        edu_school   = #{edu_school  }
				      	WHEN NOT MATCHED THEN
						            INSERT (
						                    EDU_NO,
							                MEM_NO,     
							                EDU_NAME,    
							                EDU_STARTDAY,
							                EDU_ENDDAY,  
							                EDU_SCHOOL   
							              )
							        VALUES(
							                'EDU'||SEQ_EDU_NO.nextval,
							                <if test="mem_no == null">
							                (select * from (
							                                SELECT  MEM_NO
							                                    FROM  member  
							                                            ORDER by MEM_NO DESC
							                                )
							                    where rownum = 1
							                   ),
							                 </if>
							                 <if test="mem_no != null">
							                 #{mem_no},
							                 </if>
							                #{edu_name},
							                #{edu_startday},
							                #{edu_endday},
							                #{edu_school}        
							                )	
	</update>
	
	<update id="careerupdate" parameterType="MemberVo">
			 MERGE INTO 
			            career 
			      USING 
			            Dual      
			      ON (  
			            car_no 	=#{car_no   }
			            )
				  WHEN 
				      	MATCHED THEN 
					                UPDATE SET
					                            car_startday = #{car_startday},
									            car_endday   = #{car_endday  },
									            car_job      = #{car_job     },
									            car_pos      = #{car_pos     },
									            car_name     = #{car_name    }
				      	WHEN NOT MATCHED THEN
						            INSERT (
						                         CAR_NO,
									             MEM_NO,     
									             car_startday,
									             car_endday, 
									             car_job,    
									             car_pos,    
									             car_name   
									           )
									     VALUES(
									             'CAR'||SEQ_CAR_NO.nextval,
									             <if test="mem_no == null">
									             (select * from (
									                             SELECT  MEM_NO
									                                 FROM  member  
									                                         ORDER by MEM_NO DESC
									                             )
									                 where rownum = 1
									                ),
									              </if>
									              <if test="mem_no != null">
									              #{mem_no},
									              </if>
									             #{car_startday},
									             #{car_endday},
									             #{car_job},
									             #{car_pos},
									             #{car_name}
						                        )	 		
	</update>
	
	<update id="certificationupdate" parameterType="MemberVo">
			 MERGE INTO 
			            certification 
			      USING 
			            Dual      
			      ON (  
			            cer_no = #{cer_no}
			            )
				  WHEN 
				      	MATCHED THEN 
					                UPDATE SET
					                            cer_name = #{cer_name},
					                            cer_day  = #{cer_day } 
				      	WHEN NOT MATCHED THEN
						            INSERT (
						                        CER_NO,
						                        MEM_NO,     
						                        CER_NAME,
						                        cer_day 
						                        ) 
						            VALUES (
						                        'CER'||SEQ_CER_NO.nextval,
								                <if test="mem_no == null">
									                (select * from (
									                                SELECT  MEM_NO
									                                    FROM  member  
									                                            ORDER by MEM_NO DESC
									                                )
									                    where rownum = 1
									                   ),
								                 </if>
								                 <if test="mem_no != null">
								                 	#{mem_no},
								                 </if>
								                 #{cer_name},
								                 #{cer_day} 
						                        )
	</update>

	<update id="skillupdate" parameterType="MemberVo">
			 MERGE INTO 
			            skill 
			      USING 
			            Dual      
			      ON (  
			            ski_no 	=#{ski_no}
			            )
				  WHEN 
				      	MATCHED THEN 
					                UPDATE SET
					                            ski_name  =#{ski_name},
            									ski_grade =#{ski_grade}
				      	WHEN NOT MATCHED THEN
						            INSERT (
								                SKI_NO,
								                MEM_NO,     
								                SKI_NAME,
								                SKI_GRADE
								              )
								        VALUES(
								                'SKI'||SEQ_SKI_NO.nextval,
								                <if test="mem_no == null">
								                (select * from (
								                                SELECT  MEM_NO
								                                    FROM  member  
								                                            ORDER by MEM_NO DESC
								                                )
								                    where rownum = 1
								                   ),
								                 </if>
								                 <if test="mem_no != null">
								                 #{mem_no},
								                 </if>
								                #{ski_name},
								                #{ski_grade}         
								                ) 		
	</update>
	
		<update id="pj_update" parameterType="MemberVo">
			 MERGE INTO 
			            project 
			      USING 
			            Dual      
			      ON (  
			            pj_no = #{pj_no}
			            )
				  WHEN 
				      	MATCHED THEN 
					                UPDATE SET
                                                pj_startday = #{pj_startday },
                                                pj_endday   = #{pj_endday   },
                                                pj_custom   = #{pj_custom   },
                                                pj_comp     = #{pj_comp     },
                                                pj_dev_ind  = #{pj_dev_ind  },
                                                pj_dev_app  = #{pj_dev_app  },
                                                pj_part     = #{pj_part     },
                                                pj_device   = #{pj_device   },
                                                pj_os       = #{pj_os       },
                                                pj_lang     = #{pj_lang     },
                                                pj_db       = #{pj_db       },
                                                pj_tool     = #{pj_tool     },
                                                pj_comm     = #{pj_comm     },
                                                pj_etc      = #{pj_etc      },
                                                pj_name     = #{pj_name     }
				      	WHEN NOT MATCHED THEN
						            INSERT (
						            			pj_no,
								                MEM_NO,     
								                pj_startday ,
												pj_endday   ,
												pj_custom   ,
												pj_comp     ,
												pj_dev_ind  ,
												pj_dev_app  ,
												pj_part     ,
												pj_device   ,
												pj_os       ,
												pj_lang     ,
												pj_db       ,
												pj_tool     ,
												pj_comm     ,
												pj_etc      ,
												pj_name     
								              )
								        VALUES(
								                'PJ'||SEQ_PJ_NO.nextval,
								                <if test="mem_no == null">
								                (select * from (
								                                SELECT  MEM_NO
								                                    FROM  member  
								                                            ORDER by MEM_NO DESC
								                                )
								                    where rownum = 1
								                   ),
								                 </if>
								                 <if test="mem_no != null">
								                #{mem_no},
								                 </if>
								                #{pj_startday },
												#{pj_endday   },
												#{pj_custom   },
												#{pj_comp     },
												#{pj_dev_ind  },
												#{pj_dev_app  },
												#{pj_part     },
												#{pj_device   },
												#{pj_os       },
												#{pj_lang     },
												#{pj_db       },
												#{pj_tool     },
												#{pj_comm     },
												#{pj_etc      },
												#{pj_name     }        
								                ) 		
	</update>
	
	
</mapper>